openapi: 3.0.0
info:
  description: "documentacion de sistema de pedidos online para el restaurante Delilah."
  version: "1.0.0"
  title: API Delilah
  contact:
    email: ludmila.lyiu@gmail.com

servers:
  - url: "https://localhost:3000/api"

tags:
  - name: products
    description: Acciones sobre los productos

  - name: orders
    description: Acciones sobre los pedidos

  - name: users
    description: Acciones sobre los usuarios

  - name: auth
    description: Acciones de Registro y Autorización

paths:
  /products:
    post:
      security:
        - BearerAuth: []
      tags:
        - products
      summary: Agrega producto nuevo a la lista de platos
      description: Accion disponible para usuario con rol Admin
      responses:
        "201":
          description: Producto creado exitosamente!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Producto creado exitosamente!
                  data:
                    type: object
                    $ref: "#/components/schemas/Product"

        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        $ref: "#/components/requestBodies/Product"
    get:
      security:
        - BearerAuth: []
      tags:
        - products
      summary: Retorna una lista de platos
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /products/{idproduct}:
    patch:
      security:
        - BearerAuth: []
      tags:
        - products
      summary: Modifica un producto por Id
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: idproduct
          in: path
          description: Id del producto
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Producto actualizado exitosamente!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Producto actualizado exitosamente!
                  data:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        format: int64
                        example: 2
                      name:
                        type: string
                        example: Hamburguesa Clasica
                      price:
                        type: integer
                        format: int64
                        example: 400

        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el producto
        "500":
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        $ref: "#/components/requestBodies/ProductUpdate"

    delete:
      security:
        - BearerAuth: []
      tags:
        - products
      summary: Elimina un producto de las lista de platos
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: idproduct
          in: path
          description: Id del producto
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "Producto con id # eliminado exitosamente"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Producto eliminado exitosamente
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el producto
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /orders:
    post:
      security:
        - BearerAuth: []
      tags:
        - orders
      summary: Crea un nuevo pedido
      responses:
        "201":
          description: Producto creado exitosamente!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Recibimos tu pedido
                  order_num:
                    type: integer
                    format: int64
                    example: 40
        "400":
          description: "Error: Faltan datos/Valor de metodo de pago invalido"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el/los producto/s
        "500":
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        $ref: "#/components/requestBodies/Order"

    get:
      security:
        - BearerAuth: []
      tags:
        - orders
      summary: Retorna una lista de pedidos
      description: Para usuario con rol normal retorna una lista con sus pedido realizados. Para Usuario con rol Admin retorna una lista con todos los pedidos.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /orders/{orderid}:
    get:
      security:
        - BearerAuth: []
      tags:
        - orders
      summary: Retorna un pedido por Id
      description: Para usuario con rol normal retorna el pedido por Id sí le corresponde. Usuario con rol Admin puede consultar cualquier pedido.
      parameters:
        - name: orderid
          in: path
          description: Id del pedido
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el pedido
        "500":
          $ref: "#/components/responses/UnexpectedError"

    patch:
      security:
        - BearerAuth: []
      tags:
        - orders
      summary: Modifica el estado del pedido por Id
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: orderid
          in: path
          description: Id del pedido
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Estado del pedido modificado a (nuevo estado)
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el pedido
        "500":
          $ref: "#/components/responses/UnexpectedError"

      requestBody:
        $ref: "#/components/requestBodies/OrderStatus"

    delete:
      security:
        - BearerAuth: []
      tags:
        - orders
      summary: Elimina un pedido por Id
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: orderid
          in: path
          description: Id del pedido
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Pedido numero # eliminado"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el pedido
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /users:
    get:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: Retorna una lista de usuarios
      description: Para usuario con rol Normal, retorna unicamente sus datos personales. Para usuario con rol Admin, retorna una lista con todos los usuarios
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

    patch:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: Modifica datos del usuario
      description: El usuario loggeado puede modificar unicamente sus datos.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Usuario modificado exitosamente!
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/UnexpectedError"

      requestBody:
        $ref: "#/components/requestBodies/UserUpdate"

  /users/{userid}:
    get:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: Retorna un usuario por Id
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: userid
          in: path
          description: Id del usuario
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: No se encontró el usuario por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el usuario
        "500":
          $ref: "#/components/responses/UnexpectedError"

    delete:
      security:
        - BearerAuth: []
      tags:
        - users
      summary: Elimina un usuario por Id
      description: Accion disponible para usuario con rol Admin
      parameters:
        - name: userid
          in: path
          description: Id del del usuario
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Usuario eliminado exitosamente"
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No se encontró el usuario
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /auth/register:
    post:
      tags:
        - auth
      summary: Crea un nuevo usuario
      responses:
        "201":
          description: Usuario registrado exitosamente!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Usuario registrado exitosamente!
                  data:
                    type: object
                    $ref: "#/components/schemas/User"

        "400":
          description: "Error: Faltan datos"
          $ref: "#/components/responses/BadRequestError"
        "409":
          description: username/email duplicados
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: El nombre de usuario/email ya se encuentran registrados
        "500":
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        $ref: "#/components/requestBodies/User"

  /auth/login:
    post:
      tags:
        - auth
      summary: Usuario inicia sesion en el sistema
      responses:
        "200":
          description: Login exitoso!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login exitoso!
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        "400":
          description: "username/email/password invalido"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        $ref: "#/components/requestBodies/UserLogin"

components:
  schemas:
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 2
        name:
          type: string
          example: Hamburguesa Clasica
        price:
          type: integer
          example: 350
    ProductOrder:
      type: object
      properties:
        product_id:
          type: integer
          example: 2
        name:
          type: string
          example: Hamburguesa Clasica
        productOrder:
          type: object
          properties:
            product_price:
              type: integer
              format: int64
              example: 350
            product_quantity:
              type: integer
              format: int64
              example: 2
    Order:
      type: object
      properties:
        order_id:
          type: integer
          format: int64
          example: 15
        orderStatus:
          type: string
          description: Estado del pedidos
          enum:
            - nuevo
            - confirmado
            - preparando
            - enviando
            - entregado
            - cancelado
          default: nuevo
        products:
          $ref: "#/components/schemas/ProductOrder"
        payment:
          type: string
          description: Metodo de pago
          enum:
            - efectivo
            - debido
            - credito
            - mercado pago
          example: efectivo
        user:
          type: object
          properties:
            adress:
              type: string
              example: calle ejemplo 2020
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: ludmiladev
        password:
          type: string
          example: holamundo
        firstName:
          type: string
          example: ludmila
        lastName:
          type: string
          example: niec
        email:
          type: string
          example: ludmilaniec@example.com
        phone:
          type: integer
          format: int64
          example: 1159634812
        adress:
          type: string
          example: calle ejemplo 2020

  requestBodies:
    Product:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Hamburguesa Clasica
              price:
                type: integer
                example: 350
      description: Objeto del producto que se agrega en la lista de platos
      required: true
    ProductUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Hamburguesa Clasica
              price:
                type: integer
                example: 400
      description: Objeto para modificar un producto en la lista de platos
      required: true
    Order:
      content:
        application/json:
          schema:
            type: object
            properties:
              details:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Id del producto
                      example: 3
                    quantity:
                      type: integer
                      format: int64
                      description: cantidad de unidades del producto
                      example: 2
              payment_method:
                type: integer
                format: int64
                example: 1
      description: Objeto de un pedido nuevo
      required: true
    OrderStatus:
      content:
        application/json:
          schema:
            type: object
            properties:
              status_id:
                type: integer
                format: int64
                example: 3
                description: Id del estado del pedido
      description: Objeto para modificar el estado de un pedido
      required: true

    User:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: ludmiladev
              password:
                type: string
                format: password
                example: holamundo
              firstName:
                type: string
                example: ludmila
              lastName:
                type: string
                example: niec
              email:
                type: string
                example: ludmilaniec@example.com
              phone:
                type: integer
                format: int64
                example: 1159634812
              adress:
                type: string
                example: calle ejemplo 2020
      description: Objeto para crear un nuevo usuario
      required: true

    UserLogin:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: ludmiladev
              password:
                type: string
                example: holamundo
      description: Objeto para iniciar sesion en el sistema
      required: true

    UserUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: ludmila
              lastName:
                type: string
                example: niec
              password:
                type: string
                format: password
                example: nuevopass
              phone:
                type: integer
                format: int64
                example: 1159634812
              adress:
                type: string
                example: direccion nueva 2030

      description: Objeto para modificar datos del usuario
      required: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthenticatedError:
      description: "Necesitas autenticarte para acceder a este contenido"
    UnauthorizedError:
      description: "No tenes autorizacion para acceder a este contenido"
    UnexpectedError:
      description: Error en el servidor
    BadRequestError:
      description: "Error: Datos incompletos"
